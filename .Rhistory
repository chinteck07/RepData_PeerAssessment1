?cars
head(cars)
plot()
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist)
(x = cars$speed, y = cars$dist, xlab = "Speed")
plot((x = cars$speed, y = cars$dist, xlab = "Speed"))
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab="Stopping Distance", main="My Plot")
plot(cars, Main="My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15) )
plot(cars, pch = 2)
data("mtcars")
data("mtcars")
data(mtcars)
boxplot()
?boxplot
boxplot(mtcars,mpg ~cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
swirl()
install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE, which_course="Getting_and_Cleaning_Data")
install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE, which_course="Exploratory_Data_Analysis")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
tbl_df()
tbl_df(mydf)
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran,country: r_arch)
select(cran, ... )
select()
select(cran)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500 & r-os=="linux-gnu")
filter(cran, size>100500 & r-os == "linux-gnu")
filter(cran, size>100500 & r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb=size_mb / 2^10)
mutate(cran3, correct_size=size-100)
mutate(cran3, correct_size=size+100)
mutate(cran3, correct_size= size +1000)
summarize(cran, avg_bytes=mean(size))
swirl()
library (swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
? group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package)
summarise(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(coun) )
top_counts_sorted <- arrange(top_counts,desc(count) )
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, (unique>465))
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(count))
top_unique_sorted <- arrange(top_unique, desc (unique))
View(top_unique_sorted)
submit()
submit()
submit()
view(result3)
View(result3)
submit()
submit()
?mutate
submit()
cran %>%
select(ip_id, country, package, size) %>%
mutate(cran, size_mb=size/ 2^20)%>%
print
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb =size/ 2^20)%>%
print
submit()
submit()
submit()
head(pollution)
dim(pollution)
pollution$pm25
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm, col = blue)
boxplot(ppm, col = "blue")
boxplot(ppm, col = "blue", abline ="12")
abline(h =12)
hist(ppm, col = "green")
rug
rug(ppm)
rug(low)
low
high
?hist
hist(ppm, col = "green",xlim = 100 )
hist(ppm, col = "green",xlim = "100" )
hist(ppm, col = "green")
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
hist(ppm, col = "green", v= 12, lwd= 2)
abline(v =12, lwd =2)
abline
abline(v= median(ppm), col = "magenta", lwd =4)
pollution
names(polution)
names(polutions)
names(pollution)
pollution$region
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region, col ="red")
boxplot(ppm, pm25~region, col = "red")
box(ppm, col ="red")
boxplot(ppm, col="red")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution, region="east")
east <- subset(pollution, region="east")
east <- subset(pollution,region=="east")
head(east)
hist(east, col = "green")
hist(east$pm25, col="green")
hist(subset(polution, region=west)$pm25, col="green")
hist((subset(polution, region=west))$pm25, col="green")
hist((subset(pollution, region=west))$pm25, col="green")
hist(subset(pollution, region=west)$pm25, col="green")
hist(subset(pollution,region=="west")$pm25, col = "green")
plot(latitude, pm25)
plot(pollution, lattidue, pm25)
?plot
plot(pollution)
with(pollution, plot(latitude, pm25))
with(pollution, plot(latitude, pm25, lwd=2, lty=2))
abline(h=12, lwd = 2, lty =2)
plot(pollution$latitude, pollution$pm25, col = "pollution$region")
col(pollution$region)
plot(pollution$latitude, pollution$pm25, col == "pollution$region")
plot(pollution$latitude, pollution$pm25)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12 , lwd = 2, lty =2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region = west)
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data("airquality")
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(lattice)
library(datasets)
data("airquality")
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print p
print (p)
View(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
swirl()
library (swril)
library (swirl)
swirl()
head (pollution)
dim(pollution)
summary(pollution)
summary(pollution$pm25)
summary(ppm)
0
swirl()
swirl()
library (swirl)
swirl()
0
0
0
0
quit()
library(swirl)
swirl()
g+geom_point(color(drv))
g+geom_point(color(drv))
g+geom_point(color=drv, labs(title("Swirl Rules")))
g+geom_point()
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes(color = drv, size =2, alpha=1/2)) + geom_smooth(size=4,lty=3, method="lm", se=FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv))+theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim = c(-3,3))
g <-ggplot(data=testdat,x=myx, y=myy)
g <-ggplot(testdat,aes(x=myx, y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
coord_cartesian(ylim = c(-3,3))
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv ~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv ~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv ~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="displacement", y="Highway Mileage"+title="Swirl Rules")
g+geom_point()+facet_grid(drv ~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="displacement", y="Highway Mileage")
g+geom_point()+facet_grid(drv ~cyl, margins = TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="displacement", y="Highway Mileage", title="Swirl Rules!")
Typeg + geom_point() +facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
g + geom_point() +facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
exit()
exits
end
end()
bye()
```{r-prepossing data}
setwd("D:/project/assignment5_1/RepData_PeerAssessment1/")
unzip("activity.zip", overwrite=FALSE)
data <- read.csv(file="activity.csv",colClasses=c("integer", "Date", "integer"))
data$month <- as.numeric(format(data$date, "%m"))
head(data)
setwd("D:/project/assignment5_1/RepData_PeerAssessment1/")
unzip("activity.zip", overwrite=TRUE)
data <- read.csv(file="activity.csv",colClasses=c("integer", "Date", "integer"))
data$month <- as.numeric(format(data$date, "%m"))
head(data)
library(ggplot2)
ggplot(data, aes(date, steps)) + geom_bar(stat = "identity") + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day",x = "Date", y = "Total number of steps")
options(scipen = 1)
stepsPerDay <- aggregate(steps ~ date, data = data, sum, na.rm = TRUE)
x <-mean(stepsPerDay$steps)
y <-median(stepsPerDay$steps)
AveStepsPerInterval <- aggregate(steps ~ interval, data = data, mean, na.rm = TRUE)
library(ggplot2)
ggplot(AveStepsPerInterval, aes(x = interval, y = steps)) + geom_line() + ggtitle("Average number of steps taken per interval") +
xlab("Interval") + ylab("Average steps taken")
AveStepsPerInterval [which.max(AveStepsPerInterval$steps),]
sum(is.na(data))
getMeanSteps <- function(interval) {
AveStepsPerInterval[which(AveStepsPerInterval$interval == interval), ]$steps
}
newdata <- data
for (i in 1:length(newdata$steps)) {
newdata$steps[i] <- ifelse(is.na(newdata$steps[i]), getMeanSteps(newdata$interval[i]),
newdata$steps[i])
}
head(newdata)
sum(is.na(newdata))
library(ggplot2)
ggplot(newdata, aes(date, steps)) + geom_bar(stat = "identity") + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day without Missing Value",x = "Date", y = "Total number of steps")
options(scipen = 1)
NewstepsPerDay <- aggregate(steps ~ date, data = newdata, sum, na.rm = TRUE)
x1 <-mean(NewStepsPerDay$steps)
y1 <-median(NewStepsPerDay$steps)
?aggregate
View(NewstepsPerDay)
mean(NewStepsPerDay$steps)
options(scipen = 1)
NewStepsPerDay <- aggregate(steps ~ date, data = newdata, sum, na.rm = TRUE)
x1 <-mean(NewStepsPerDay$steps)
y1 <-median(NewStepsPerDay$steps)
x-x1
y-y1
**Median** will be impact of imputing missing data on the estimates of the total daily number of steps
## Are there differences in activity patterns between weekdays and weekends?
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r-prepossing data}
setwd("D:/project/assignment5_1/RepData_PeerAssessment1/")
unzip("activity.zip", overwrite=TRUE)
data <- read.csv(file="activity.csv",colClasses=c("integer", "Date", "integer"))
data$month <- as.numeric(format(data$date, "%m"))
head(data)
```
## What is mean total number of steps taken per day?
Make a histogram of the total number of steps taken each day
```{r-plotting the histrogram}
library(ggplot2)
ggplot(data, aes(date, steps)) + geom_bar(stat = "identity") + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day",x = "Date", y = "Total number of steps")
```
Calculate and report the mean and median of the total number of steps taken per day
```{r-making table summary by Date and get the mean & median}
options(scipen = 1)
stepsPerDay <- aggregate(steps ~ date, data = data, sum, na.rm = TRUE)
x <-mean(stepsPerDay$steps)
y <-median(stepsPerDay$steps)
```
Mean of the total number of steps taken per day is `r x`
Median of the total number of steps taken per day is `r y`
## What is the average daily activity pattern?
Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r-time series plot}
AveStepsPerInterval <- aggregate(steps ~ interval, data = data, mean, na.rm = TRUE)
library(ggplot2)
ggplot(AveStepsPerInterval, aes(x = interval, y = steps)) + geom_line() + ggtitle("Average number of steps taken per interval") +
xlab("Interval") + ylab("Average steps taken")
```
5-minute interval at **835**, on average across all the days in the dataset, contains the maximum number of steps *206.1698*
```{r- calculate the interval with max steps}
AveStepsPerInterval [which.max(AveStepsPerInterval$steps),]
```
## Imputing missing values
Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r-total number of rows with NAs}
sum(is.na(data))
```
**Mean for that 5-minute interval** been used in order to fill in all of the missing values in the dataset.
```{r-replace the missing values in dataset}
getMeanSteps <- function(interval) {
AveStepsPerInterval[which(AveStepsPerInterval$interval == interval), ]$steps
}
newdata <- data
for (i in 1:length(newdata$steps)) {
newdata$steps[i] <- ifelse(is.na(newdata$steps[i]), getMeanSteps(newdata$interval[i]),
newdata$steps[i])
}
head(newdata)
sum(is.na(newdata))
```
Make a histogram of the total number of steps taken each day for the new dataset without missing values
```{r-plotting the histrogram for newdata}
library(ggplot2)
ggplot(newdata, aes(date, steps)) + geom_bar(stat = "identity") + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day without Missing Value",x = "Date", y = "Total number of steps")
```
Calculate and report the mean and median total number of steps taken per day.
```{r-making table summary by Date and get the mean & median}
options(scipen = 1)
NewStepsPerDay <- aggregate(steps ~ date, data = newdata, sum, na.rm = TRUE)
x1 <-mean(NewStepsPerDay$steps)
y1 <-median(NewStepsPerDay$steps)
```
New Mean of the total number of steps taken per day is `r x1`
New Median of the total number of steps taken per day is `r y1`
```{r-compare new mean & median}
Diffmean <- x1-x
Diffmedian <- y1-y
```
**Median** (`r Diffmedian`) will be impact of imputing missing data on the estimates of the total daily number of steps
## Are there differences in activity patterns between weekdays and weekends?
weekday <- weekdays(newdata$date)
type <- ifelse(weekday == "Saturday" | weekday == "Sunday", "weekend", "weekday")
type <- factor(type)
library(plyr)
weekday <- weekdays(newdata$date)
type <- ifelse(weekday == "Saturday" | weekday == "Sunday", "weekend", "weekday")
type <- factor(type)
library(plyr)
df <- ddply(.data = data.frame(newdata$steps), .variables = .(newdata$interval, type),
colwise(mean))
View(df)
weekday <- weekdays(newdata$date)
type <- ifelse(weekday == "Saturday" | weekday == "Sunday", "weekend", "weekday")
type <- factor(type)
library(plyr)
df <- ddply(.data = data.frame(newdata$steps), .variables = .(newdata$interval, type))
View(df)
?ddply
View(df)
View(newdata)
newData$weekdays <- factor(format(newData$date, "%A"))
newdata$weekdays <- factor(format(newData$date, "%A"))
newdata$weekdays <- factor(format(newdata$date, "%A"))
View(newdata)
data$weekdays <- factor(format(data$date, "%A"))
View(data)
data$type <-factor(type)
View(data)
data$type <-factor(type)
setwd("D:/project/assignment5_1/RepData_PeerAssessment1/")
unzip("activity.zip", overwrite=TRUE)
data <- read.csv(file="activity.csv",colClasses=c("integer", "Date", "integer"))
data$month <- as.numeric(format(data$date, "%m"))
head(data)
```{r-plotting the histrogram}
library(ggplot2)
ggplot(data, aes(date, steps)) + geom_bar(stat = "identity") + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day",x = "Date", y = "Total number of steps")
options(scipen = 1)
stepsPerDay <- aggregate(steps ~ date, data = data, sum, na.rm = TRUE)
x <-mean(stepsPerDay$steps)
y <-median(stepsPerDay$steps)
AveStepsPerInterval <- aggregate(steps ~ interval, data = data, mean, na.rm = TRUE)
library(ggplot2)
ggplot(AveStepsPerInterval, aes(x = interval, y = steps)) + geom_line() + ggtitle("Average number of steps taken per interval") +
xlab("Interval") + ylab("Average steps taken")
AveStepsPerInterval [which.max(AveStepsPerInterval$steps),]
sum(is.na(data))
getMeanSteps <- function(interval) {
AveStepsPerInterval[which(AveStepsPerInterval$interval == interval), ]$steps
}
newdata <- data
for (i in 1:length(newdata$steps)) {
newdata$steps[i] <- ifelse(is.na(newdata$steps[i]), getMeanSteps(newdata$interval[i]),
newdata$steps[i])
}
head(newdata)
sum(is.na(newdata))
library(ggplot2)
ggplot(newdata, aes(date, steps)) + geom_bar(stat = "identity") + facet_grid(. ~ month, scales = "free") + labs(title = "Histogram of Total Number of Steps Taken Each Day w/o Missing Value",x = "Date", y = "Total number of steps")
options(scipen = 1)
NewStepsPerDay <- aggregate(steps ~ date, data = newdata, sum, na.rm = TRUE)
x1 <-mean(NewStepsPerDay$steps)
y1 <-median(NewStepsPerDay$steps)
Diffmean <- x1-x
Diffmedian <- y1-y
data$weekdays <- factor(format(data$date, "%A"))
type <- ifelse(weekday == "Saturday" | weekday == "Sunday", "weekend", "weekday")
type <- factor(type)
data$type <-factor(type)
weekday <- weekdays(newdata$date)
type <- ifelse(weekday == "Saturday" | weekday == "Sunday", "weekend", "weekday")
type <- factor(type)
data$type <-factor(type)
newdata$weekdays <- factor(format(newdata$date, "%A"))
weekday <- weekdays(newdata$date)
type <- ifelse(weekday == "Saturday" | weekday == "Sunday", "weekend", "weekday")
type <- factor(type)
newdata$type <-factor(type)
View(newdata)
str(newdata)
summary(newdata)
NewAveStepsPerInterval <- aggregate(steps ~ interval, data = newdata, mean, na.rm = TRUE)
library(ggplot2)
ggplot(NewAveStepsPerInterval, aes(x = interval, y = steps)) + geom_line()+ facet_grid(type ~ .) + ggtitle("Average number of steps taken per interval") + xlab("Interval") + ylab("Average steps taken")
View(AveStepsPerInterval)
?aggregate
NewAveStepsPerInterval <- aggregate(steps, list(interval, type), data = newdata, mean, na.rm = TRUE)
NewAveStepsPerInterval <- aggregate(newdata$steps, list(interval, type), data = newdata, mean, na.rm = TRUE)
NewAveStepsPerInterval <- aggregate(newData$steps,
list(interval = as.numeric(as.character(newData$interval)),
weekdays = newData$weekdays),
FUN = "mean")
NewAveStepsPerInterval <- aggregate(newdata$steps, list(interval, type),FUN = "mean")
NewAveStepsPerInterval <- aggregate(steps ~ list(interval,type), data = newdata, mean, na.rm = TRUE)
NewAveStepsPerInterval <- aggregate(steps ~ interval|type, data = newdata, mean, na.rm = TRUE)
NewAveStepsPerInterval <- aggregate(steps ~ interval~type, data = newdata, mean, na.rm = TRUE)
NewAveStepsPerInterval <- aggregate(steps ~ interval+type, data = newdata, mean, na.rm = TRUE)
View(NewAveStepsPerInterval)
library(ggplot2)
ggplot(NewAveStepsPerInterval, aes(x = interval, y = steps)) + geom_line()+ facet_grid(type ~ .) + ggtitle("Average number of steps taken per interval") + xlab("Interval") + ylab("Average steps taken")
